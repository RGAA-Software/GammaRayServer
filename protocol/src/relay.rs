// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayErrorMessage {
    #[prost(enumeration = "RelayErrorCode", tag = "1")]
    pub code: i32,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(enumeration = "RelayMessageType", tag = "3")]
    pub which_message: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayDeviceInfo {
    #[prost(string, tag = "2")]
    pub device_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayDeviceNetInfo {
    #[prost(string, tag = "1")]
    pub ip: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub mac: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayHello {
    #[prost(message, repeated, tag = "2")]
    pub net_info: ::prost::alloc::vec::Vec<RelayDeviceNetInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayHeartBeat {
    #[prost(int64, tag = "1")]
    pub index: i64,
    #[prost(message, repeated, tag = "2")]
    pub net_info: ::prost::alloc::vec::Vec<RelayDeviceNetInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayTargetMessage {
    #[prost(string, repeated, tag = "10")]
    pub room_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bytes = "vec", tag = "30")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayCreateRoomMessage {
    #[prost(string, tag = "1")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub remote_device_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayCreateRoomRespMessage {
    #[prost(string, tag = "1")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub remote_device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub room_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRequestControlMessage {
    #[prost(string, tag = "10")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub remote_device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub room_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRequestControlRespMessage {
    #[prost(string, tag = "10")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub remote_device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "35")]
    pub under_control: bool,
    #[prost(string, tag = "40")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRoomPreparedMessage {
    #[prost(string, tag = "10")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub remote_device_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRoomInfoChangedMessage {
    #[prost(string, tag = "10")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub remote_device_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "40")]
    pub devices: ::prost::alloc::vec::Vec<RelayDeviceInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRoomDestroyedMessage {
    #[prost(string, tag = "10")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub remote_device_id: ::prost::alloc::string::String,
}
/// I don't want to relay anymore
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRequestStopMessage {
    #[prost(string, tag = "10")]
    pub room_id: ::prost::alloc::string::String,
    #[prost(string, tag = "20")]
    pub device_id: ::prost::alloc::string::String,
    #[prost(string, tag = "30")]
    pub remote_device_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelayRequestStopRespMessage {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayMessage {
    #[prost(string, tag = "20")]
    pub from_device_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "21")]
    pub relay_error: ::core::option::Option<RelayErrorMessage>,
    #[prost(enumeration = "RelayMessageType", tag = "30")]
    pub r#type: i32,
    #[prost(message, optional, tag = "40")]
    pub hello: ::core::option::Option<RelayHello>,
    #[prost(message, optional, tag = "50")]
    pub heartbeat: ::core::option::Option<RelayHeartBeat>,
    #[prost(message, optional, tag = "60")]
    pub relay: ::core::option::Option<RelayTargetMessage>,
    #[prost(message, optional, tag = "70")]
    pub create_room: ::core::option::Option<RelayCreateRoomMessage>,
    #[prost(message, optional, tag = "80")]
    pub create_room_resp: ::core::option::Option<RelayCreateRoomRespMessage>,
    #[prost(message, optional, tag = "90")]
    pub request_control: ::core::option::Option<RelayRequestControlMessage>,
    #[prost(message, optional, tag = "100")]
    pub request_control_resp: ::core::option::Option<RelayRequestControlRespMessage>,
    #[prost(message, optional, tag = "110")]
    pub room_prepared: ::core::option::Option<RelayRoomPreparedMessage>,
    #[prost(message, optional, tag = "120")]
    pub room_info_changed: ::core::option::Option<RelayRoomInfoChangedMessage>,
    #[prost(message, optional, tag = "130")]
    pub room_destroyed: ::core::option::Option<RelayRoomDestroyedMessage>,
    #[prost(message, optional, tag = "140")]
    pub request_stop: ::core::option::Option<RelayRequestStopMessage>,
    #[prost(message, optional, tag = "150")]
    pub request_stop_resp: ::core::option::Option<RelayRequestStopRespMessage>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RelayMessageType {
    KRelayError = 0,
    KRelayHello = 5,
    KRelayHeartBeat = 10,
    KRelayTargetMessage = 20,
    KRelayCreateRoom = 30,
    KRelayCreateRoomResp = 40,
    KRelayRequestControl = 50,
    KRelayRequestControlResp = 60,
    KRelayRoomPrepared = 70,
    KRelayRoomInfoChanged = 80,
    KRelayRoomDestroyed = 90,
    KRelayRequestStop = 100,
    KRelayRequestStopResp = 110,
}
impl RelayMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KRelayError => "kRelayError",
            Self::KRelayHello => "kRelayHello",
            Self::KRelayHeartBeat => "kRelayHeartBeat",
            Self::KRelayTargetMessage => "kRelayTargetMessage",
            Self::KRelayCreateRoom => "kRelayCreateRoom",
            Self::KRelayCreateRoomResp => "kRelayCreateRoomResp",
            Self::KRelayRequestControl => "kRelayRequestControl",
            Self::KRelayRequestControlResp => "kRelayRequestControlResp",
            Self::KRelayRoomPrepared => "kRelayRoomPrepared",
            Self::KRelayRoomInfoChanged => "kRelayRoomInfoChanged",
            Self::KRelayRoomDestroyed => "kRelayRoomDestroyed",
            Self::KRelayRequestStop => "kRelayRequestStop",
            Self::KRelayRequestStopResp => "kRelayRequestStopResp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kRelayError" => Some(Self::KRelayError),
            "kRelayHello" => Some(Self::KRelayHello),
            "kRelayHeartBeat" => Some(Self::KRelayHeartBeat),
            "kRelayTargetMessage" => Some(Self::KRelayTargetMessage),
            "kRelayCreateRoom" => Some(Self::KRelayCreateRoom),
            "kRelayCreateRoomResp" => Some(Self::KRelayCreateRoomResp),
            "kRelayRequestControl" => Some(Self::KRelayRequestControl),
            "kRelayRequestControlResp" => Some(Self::KRelayRequestControlResp),
            "kRelayRoomPrepared" => Some(Self::KRelayRoomPrepared),
            "kRelayRoomInfoChanged" => Some(Self::KRelayRoomInfoChanged),
            "kRelayRoomDestroyed" => Some(Self::KRelayRoomDestroyed),
            "kRelayRequestStop" => Some(Self::KRelayRequestStop),
            "kRelayRequestStopResp" => Some(Self::KRelayRequestStopResp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RelayErrorCode {
    KRelayCodeUnknown = 0,
    KRelayCodeOk = 200,
    KRelayCodeCreateRoomFailed = 600,
    KRelayCodeRejectControl = 601,
    KRelayCodeClientNotFound = 602,
    KRelayCodeRemoteClientNotFound = 603,
}
impl RelayErrorCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KRelayCodeUnknown => "kRelayCodeUnknown",
            Self::KRelayCodeOk => "kRelayCodeOk",
            Self::KRelayCodeCreateRoomFailed => "kRelayCodeCreateRoomFailed",
            Self::KRelayCodeRejectControl => "kRelayCodeRejectControl",
            Self::KRelayCodeClientNotFound => "kRelayCodeClientNotFound",
            Self::KRelayCodeRemoteClientNotFound => "kRelayCodeRemoteClientNotFound",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kRelayCodeUnknown" => Some(Self::KRelayCodeUnknown),
            "kRelayCodeOk" => Some(Self::KRelayCodeOk),
            "kRelayCodeCreateRoomFailed" => Some(Self::KRelayCodeCreateRoomFailed),
            "kRelayCodeRejectControl" => Some(Self::KRelayCodeRejectControl),
            "kRelayCodeClientNotFound" => Some(Self::KRelayCodeClientNotFound),
            "kRelayCodeRemoteClientNotFound" => {
                Some(Self::KRelayCodeRemoteClientNotFound)
            }
            _ => None,
        }
    }
}
